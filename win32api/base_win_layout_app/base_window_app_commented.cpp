/* Минимальный код каркаса Windows-приложения */
/* Подробный разбор */


#include <windows.h> /* Присутствует во всех Windows-программах 
					Внутри включения:
						1.  windef.h winbase.h wingdi.h winuser.h
						2. файлы с определениями API-функций, констант и макросов
					*/


#include <tchar.h>   /* Полезные макросы. Например _T()
					 #define _T(x) __T(x)
					 #ifndef _UNICODE
					 #define __T(x)	L ## x
					 #else
					 #define __T(x) x
					 #endif

					 Макрос преобразуется в оператор L (инструкция комплилятору для образования строки Unicode)
					 Как работает L ## x. Если x = "abc", то L ## x обозначает L"abc"
					 */

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);  /*Функция обратного вызова. 
													   Она регистритуется в ОС, и ее вызов осуществляет ОС, когда 
													   требуется обработать сообщение. LRESULT эквивалентен long для Win32-проекта*/
TCHAR WinName[] = _T("MainFrame");		/* TCHAR преобразуется в wchar_t если константа _UNITCODE определена, иначе в char
										wchar_t эквивалентен типу short и служит для хранения в кодировке Unicode (16 бит на символ)
										Имя класса окна используется ОС для его идентификации, может быть произвольным.
										*/

/*Бывает много разных дескрипторов: HINSTANCE, HWND, ... все они 32-разрядные целые числа.*/
// Это головная функция
int APIENTRY _tWinMain( /*Unicode: wWinMain, иначе: WinMain*/
	HINSTANCE This,	/* Дескриптор текущего приложения. ОС присваивает его приложению при загрузке. */
	HINSTANCE Prev, /* В современных системах всегда = 0. Дескриптор последнего загруженного приложения. */
	LPTSTR cmd,		/* Указатель командной строки, LPTSTR это TCHAR* */
	int mode)		/* Режим отображения окна */
{
	HWND hWnd;  // Дескриптор главного окна приложения
	MSG msg;	/* Структура для хранения сообщения, передаваемого операционной системой 
				struct MSG
				{
					HWND hWnd;		// Дескриптор окна
					UINT message;	// Номер сообщения
					WPARAM wParam;  // 32-разрядные целые содержат		
					LPARAM lParam;  //   доп параметры сообщения
					DWORD time;		// Время посылки сообщения в мс
					POINT pt;		// Координаты курсора (x, y)
				};
				struct POINT { LONG x, y; };

				WPARAM - короткий параметр для передачи 16разрядного значения в 16 разрядной ОС
				в WIN32 это такое 32-разрядное как и LPARAM
				*/
	WNDCLASS wc;// Класс окна

	// Определение класса окна.
	wc.hInstance = This;		// Дескриптор текущего приложения
	wc.lpszClassName = WinName;	// Имя класса окна
	wc.lpfnWndProc = WndProc;	// Имя оконной функции для обработки сообщений
	wc.style = CS_HREDRAW | CS_VREDRAW;	// Стиль окна (автоматическая перерисовка при изменении размера по горизонтали/вертикали)
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);	/* иконка (NULL указывает на системную пиктограмму)
											  набор:
											  IDI_APPLICATION - стандартная иконка
											  IDI_ASTERISK - звездочка
											  IDI_EXCLAMATION, IDI_HAND, IDI_QUESTION, IDI_WINLOGO (логотип Win)
											  */
	wc.hCursor = LoadCursor(NULL, IDC_ARROW); /*курсор, NULL указывает на системный курсор
											  IDC_ARROW, IDC_APPSTARTING (курсор и часы), IDC_CROSS, IDC_IBEAM(текстовый),
											  IDC_NO(перечеркнутый круг), IDC_SIZEALL(4-лепестковая стрелка),
											  IDC_SIZENESW, IDC_SIZENWSE, IDC_SIZENS, IDC_SIZEWE, IDC_UPARROW, IDC_WAIT(часы)
											  */
	wc.lpszMenuName = NULL; // Нет меню
	wc.cbClsExtra = 0;      // Нет дополнительных данных класса
	wc.cbWndExtra = 0;		// Нет дополнительных данных окна

	// Заполнение окна белым цветом
	
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1); /* Дескриптор кисти, которая используется при заполнении окна.
												   Создается кисть белого цвета WHITE_BRUSH. Требуется явное преобразование типа HBRUSH.
												   */
	if (!RegisterClass(&wc)) return 0;		// Регистрация класса окна

	hWnd = CreateWindow(
		WinName,							// Имя класса окна
		_T("Каркас Windows-приложения"),    // Заголовок окна
		
		WS_OVERLAPPEDWINDOW,				/* Стиль окна: системное меню, заголовок, рамка изменения размеров, кнопки минимизации
											развертывания, закрытия*/
		CW_USEDEFAULT,						// х - координаты левого верхнего угла (CW_USEDEFAULT означает, что система сама выбирает наиболее удобное место или размер)
		CW_USEDEFAULT,						// y
		CW_USEDEFAULT,						// Width (в пикселях)
		CW_USEDEFAULT,						// Height
		HWND_DESKTOP,						// Дескриптор родительского окна
		NULL,								// Нет меню
		This,								// Дескриптор приложения
		NULL);								// Дополнительной информации нет

	
	ShowWindow(hWnd, mode);					// Показать окно
	while (GetMessage(&msg, NULL, 0, 0))	/* Второй параметр указывает на окно, для которого предназначено сообщение
											если NULL то перехават идет для всех окон приложения
											Два последних параметра указывают на диапазон [min, max] получаемых сообщений.
											Если оба = 0, то обрабатываем все сообщения.

											в файле winuser.h имеются символические имена для номеров. У этих имен префикс WM_
											*/
	{
		TranslateMessage(&msg);		/* Функция трансляции кодов нажатой клавиши.
									Транслирует код нажатой клавиши в клавиатурные сообщения WM_CHAR.
									wParam - код нажатой клавиши в cp1251
									lParam - младшее слово: количество повторений этого сообщения в результате удержания
										   - старшее слово: битовая карта со значениями:
													Бит	Значение
													15	1 - отпущена, 0 - нажата клавиша
													14  1 - клавиша была нажата перед посылкой сообщения
													13  1 - нажата Alt
													12-9 Резерв
													8 - 1 если нажата функциональная клавиша
													7-0  Scan-код клавиши

									Функция нужна для обработки сообщений с клавиатуры.
									*/
		DispatchMessage(&msg);		// Посылвает сообщение функции WndProc
	}
	return 0;
}

// Оконная функция вызывается ОС и получает сообщения из очереди для данного приложения
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_DESTROY:
		PostQuitMessage(0);
		/* Приложение завершается с кодом возврата = 0.
		Генерируется сообщение WM_QUIT, получив которое функция GetMEssage возвращает нулевое значение и цикл прерывается.
		*/

		break;	// Завершение программы
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}